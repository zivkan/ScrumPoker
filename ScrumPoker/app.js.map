{"version":3,"sources":["AppModule.js","ControllerModule.js","ConnectionController.js","LobbyController.js","PokerServer.js","RoomController.js"],"names":["scrumPokerApp","angular","module","config","$routeProvider","when","templateUrl","controller","otherwise","redirectTo","$scope","$modalInstance","PokerServer","stateMessage","state","$","connection","connectionState","connecting","reconnecting","disconnected","connected","hub","stateChanged","stateInfo","newState","$apply","server","$location","rooms","Reconnect","then","getRooms","data","CreateRoom","roomName","roomId","path","$on","event","room","push","removeRoom","index","splice","i","length","Id","Voters","Viewers","factory","$rootScope","$modal","$q","$new","start","lobby","lobbyHub","client","roomAdded","$emit","roomDeleted","roomChanged","currentRoom","roomHub","roomUpdate","participants","Participants","average","Average","majority","MajorityVote","createRoom","JoinRoom","joinRoom","ChangeParticipation","username","changeParticipation","LeaveRoom","leaveRoom","Bet","amount","bet","modalInstance","open","backdrop","dismiss","$routeParams","participation","allowedBets","roomInfo","value","setName","name","serverName"],"mappings":"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","file":"app.js","sourcesContent":["(function() {\r\n    'use strict';\r\n\r\n    var scrumPokerApp = angular.module('scrumPokerApp', ['ngRoute', 'ui.bootstrap', 'scrumPokerControllers', 'templates']);\r\n\r\n    scrumPokerApp.config([\r\n        '$routeProvider', function($routeProvider) {\r\n            $routeProvider.when('/', {\r\n                    templateUrl: 'partials/lobby.html',\r\n                    controller: 'lobby'\r\n                }).\r\n                when('/room/:roomId', {\r\n                    templateUrl: 'partials/room.html',\r\n                    controller: 'room'\r\n                }).\r\n                otherwise({ redirectTo: '/' });\r\n        }\r\n    ]);\r\n})();\r\n","(function () {\r\n    'use strict';\r\n    angular.module('scrumPokerControllers', ['templates']);\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular.module('scrumPokerControllers').controller('connection', [\r\n        '$scope', '$modalInstance', 'PokerServer',\r\n        function($scope, $modalInstance, PokerServer) {\r\n            $scope.PokerServer = PokerServer;\r\n\r\n            var stateMessage = function(state) {\r\n                if (state === $.connection.connectionState.connecting)\r\n                    return \"connecting\";\r\n                if (state === $.connection.connectionState.reconnecting)\r\n                    return \"reconnecting\";\r\n                if (state === $.connection.connectionState.disconnected)\r\n                    return \"disconnected\";\r\n                if (state === $.connection.connectionState.connected)\r\n                    return \"connected\";\r\n                return \"unknown state\";\r\n            };\r\n\r\n            $scope.connectionState = stateMessage($.connection.hub.state);\r\n\r\n            $.connection.hub.stateChanged(function(stateInfo) {\r\n                $scope.connectionState = stateMessage(stateInfo.newState);\r\n                $scope.$apply();\r\n            });\r\n\r\n        }\r\n    ]);\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('scrumPokerControllers').controller('lobby', [\r\n        '$scope', 'PokerServer', '$location', function ($scope, server, $location) {\r\n            $scope.rooms = null;\r\n\r\n            server.Reconnect().then(function () {\r\n                server.getRooms().then(function (data) {\r\n                    $scope.rooms = data;\r\n                });\r\n            });\r\n\r\n            $scope.CreateRoom = function(roomName) {\r\n                server.CreateRoom(roomName).then(function(roomId) {\r\n                    if (roomId !== null) {\r\n                        $location.path('/room/' + roomId);\r\n                    }\r\n                });\r\n            };\r\n\r\n            server.$on('roomAdded', function (event, room) {\r\n                $scope.$apply(function () {\r\n                    if ($scope.rooms !== null) {\r\n                        $scope.rooms.push(room);\r\n                    }\r\n                });\r\n            });\r\n\r\n            server.$on('roomDeleted', function (event, roomId) {\r\n                var removeRoom = function(index) { $scope.rooms.splice(index, 1); };\r\n                for (var i = 0; i < $scope.rooms.length; i++) {\r\n                    if ($scope.rooms[i].Id === roomId) {\r\n                        $scope.$apply(removeRoom(i));\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n\r\n            server.$on('roomUpdated', function(event, room) {\r\n                for (var i = 0; i < $scope.rooms.length; i++) {\r\n                    if ($scope.rooms[i].Id === room.Id) {\r\n                        $scope.$apply(function() {\r\n                            $scope.rooms[i].Voters = room.Voters;\r\n                            $scope.rooms[i].Viewers = room.Viewers;\r\n                        });\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n\r\n        }\r\n    ]);\r\n\r\n})();\r\n","(function() {\r\n    'use strict';\r\n    angular.module('scrumPokerApp').factory('PokerServer', [\r\n        '$rootScope', '$location', '$modal', '$q', function($rootScope, $location, $modal, $q) {\r\n            // 'class' and connection method\r\n            var PokerServer = $rootScope.$new();\r\n\r\n            PokerServer.Reconnect = function() {\r\n                return $q.when($.connection.hub.start());\r\n            };\r\n\r\n            // lobby methods & events\r\n            var lobby = $.connection.lobbyHub;\r\n\r\n            PokerServer.getRooms = function() {\r\n                return $q.when(lobby.server.getRooms());\r\n            };\r\n\r\n            lobby.client.roomAdded = function(room) {\r\n                PokerServer.$emit('roomAdded', room);\r\n            };\r\n\r\n            lobby.client.roomDeleted = function (roomId) {\r\n                PokerServer.$emit('roomDeleted', roomId);\r\n            };\r\n\r\n            lobby.client.roomChanged = function(room) {\r\n                PokerServer.$emit('roomUpdated', room);\r\n            }\r\n\r\n            // room methods & events\r\n            PokerServer.currentRoom = null;\r\n            var room = $.connection.roomHub;\r\n\r\n            room.client.roomUpdate = function(participants) {\r\n                if (PokerServer.currentRoom !== null) {\r\n                    PokerServer.currentRoom.Voters = participants.Participants;\r\n                    PokerServer.currentRoom.Viewers = participants.Viewers;\r\n                    PokerServer.currentRoom.average = participants.Average;\r\n                    PokerServer.currentRoom.majority = participants.MajorityVote;\r\n                    $rootScope.$apply();\r\n                }\r\n            };\r\n\r\n            PokerServer.CreateRoom = function(roomName) {\r\n                return $q.when(lobby.server.createRoom(roomName));\r\n            };\r\n\r\n            PokerServer.JoinRoom = function(roomId) {\r\n                return $q.when(room.server.joinRoom(roomId));\r\n            };\r\n\r\n            PokerServer.ChangeParticipation = function(username) {\r\n                return $q.when(room.server.changeParticipation(username));\r\n            };\r\n\r\n            PokerServer.LeaveRoom = function() {\r\n                return $q.when(room.server.leaveRoom());\r\n            };\r\n\r\n            PokerServer.Bet = function(amount) {\r\n                room.server.bet(amount);\r\n            };\r\n\r\n\r\n            // Connect problem dialog\r\n            PokerServer.modalInstance = null;\r\n\r\n            $.connection.hub.stateChanged(function(stateInfo) {\r\n                if (stateInfo.newState !== $.connection.connectionState.connected) {\r\n                    if (PokerServer.modalInstance === null) {\r\n                        PokerServer.modalInstance = $modal.open({\r\n                            templateUrl: 'partials/connection.html',\r\n                            controller: 'connection',\r\n                            backdrop: 'static'\r\n                        });\r\n                    }\r\n                } else {\r\n                    if (PokerServer.modalInstance !== null) {\r\n                        PokerServer.modalInstance.dismiss();\r\n                        PokerServer.modalInstance = null;\r\n                    }\r\n                }\r\n            });\r\n\r\n            return PokerServer;\r\n        }\r\n    ]);\r\n})();\r\n","(function() {\r\n    'use strict';\r\n\r\n    angular.module('scrumPokerControllers').controller('room', [\r\n        '$scope', 'PokerServer', '$routeParams', function($scope, server, $routeParams) {\r\n            $scope.server = server;\r\n            $scope.roomId = $routeParams.roomId;\r\n            $scope.participation = \"viewer\";\r\n\r\n            $scope.allowedBets = [0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89];\r\n\r\n            server.Reconnect().then(function() {\r\n                server.JoinRoom($scope.roomId).then(function(roomInfo) {\r\n                    server.currentRoom = roomInfo;\r\n                });\r\n            });\r\n\r\n            $scope.$on('$destroy', function() {\r\n                server.LeaveRoom();\r\n            });\r\n\r\n            $scope.Bet = function(value) {\r\n                if (value === '-')\r\n                    value = null;\r\n                server.Bet(value);\r\n            };\r\n\r\n            $scope.setName = function(name) {\r\n                $scope.participation = 'changing';\r\n                server.ChangeParticipation(name).then(\r\n                    function() {\r\n                        $scope.serverName = name;\r\n                        $scope.participation = (name === null) ? \"viewer\" : \"voter\";\r\n                    },\r\n                    function() {\r\n                        $scope.participation = (name === null) ? \"viewer\" : \"voter\";\r\n                    });\r\n            }\r\n\r\n        }\r\n    ]);\r\n\r\n})();\r\n"],"sourceRoot":"/source/"}